/*
    APPROACH -> 1
    TC -> O(N^2)
    
    for(int i=0;i<size; i++){
        
        for(int j = i+1; j<size; j++){
            if(abs(arr[i] - arr[j]) == n ){
                return true;
            }
        }
    }
    return false; */
    
    
     /*
    APPROACH -> 2
    TC -> nlog(n)
    
    sort(arr, arr + size);
    
    int s = 0;
    int e= size-1;
    int mid = e - (e-s)/2;
    
    if(n == 0){
        for(int i =0; i<size-1; i++){
            if(arr[i] == arr[i+1]){
                return true ;
            }
        }
    }else{
        
    for(int i=0;i<size; i++){
        int key = arr[i] + n;
        
        while(s<e){
            if(arr[mid] == key){
                return true ;
            }
            else if( arr[mid] > key){
                e --;
            }else{
                s++ ;
            }
            
            mid = e - (e-s)/2;
        }
        
        s= 0;
        e= size-1;
        mid = e- (e-s)/2;
        
    }
    }
    return false;
   */
   
   APPROACH -> 3 MOST OPTIMISED CODE 
   TC -> Nlog(N)
   
   bool findPair(int arr[], int size, int n){
    //code
    
  sort(arr, arr + size);
  
  int i=0;
  int j=1;
  
  while(i < size && j < size){
      
      if( i != j && ((arr[j] - arr[i]) == n) ){
          return true ;
          
      }
      else if((arr[j] - arr[i] )< n){
          j++;
      }else{
          i++;
      }
  }
  return false;
    
}
   
