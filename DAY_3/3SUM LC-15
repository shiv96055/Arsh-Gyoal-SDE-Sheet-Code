APPROACH -1
TC - O(N*N*N*(logN)
sc - O(n)

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans ;
        int n = nums.size();
        set<vector<int>> s;
        
        for(int i = 0; i<n; i++){
            for(int j = i+1; j<n; j++){
                for(int k = j+1; k<n; k++){
                    
                    if(nums[i] + nums[j] + nums[k] == 0){
                        vector<int> temp ;
                         temp.push_back(nums[i]);
                         temp.push_back(nums[j]);
                         temp.push_back(nums[k]);
                        sort(temp.begin(), temp.end());
                        s.insert(temp);
                    }
                }
            }
        }
        for(auto it = s.begin(); it != s.end(); it++){
            ans.push_back(*it);
        }
        return ans ;
    }
};


// APPROACH 2
//TC - O(N*N)
// SC(1)
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
  sort(nums.begin(),nums.end());
        int n=nums.size();
        vector<vector<int>> res;
        for(int i=0;i<n-2;i++){
               if(i>0 && (nums[i]==nums[i-1]) )continue;
               int l=i+1, r= n-1;
               while(l<r){
                   int sum =nums[i]+nums[l]+nums[r];
                   
                   if(sum<0) l++;
                   else if(sum>0)r--;
                   else {
                       res.push_back(vector<int>{nums[i],nums[l],nums[r]});
                       while(l+1<r && nums[l]==nums[l+1])l++;
                       while(l<r-1 && nums[r]==nums[r-1]) r--;
                       l++; r--;
                   }
               }
        }
       
        return res ;
        
