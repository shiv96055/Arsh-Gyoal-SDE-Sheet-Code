// APPROACH -1 
// TC -> O(Nlog(N))
// SC ->O(N)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
     vector<pair<int,int>> v ;
        for(int i =0 ;i<nums.size(); i++){
            v.push_back(make_pair(nums[i], i));
        }
        
        sort(v.begin(), v.end());
        
        int s = 0; 
        int e = nums.size() -1;
         
        while(s<e){
            if(v[s].first + v[e].first > target){
                e--;
            } else if(v[s].first + v[e].first <target){
                s++;
            }else{
                break;
            }
        }
        
        return {v[s].second, v[e].second} ;
        
     }
     };
   
   // APPROACH -> 2
   // TC -> O(N^2)
   // SC -> O(1)
     
     class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
     
     vector<int> ans ;
        
        for(int i = 0; i<nums.size() ; i++){
            for(int j = i+1; j<nums.size(); j++)
            {
                if(nums[i] + nums[j] == target){
                    ans.push_back(i);
                    ans.push_back(j);
                    break;
                }
            }
        }
        return ans ;
        
        }
        };
